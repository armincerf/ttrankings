{
  "db_name": "PostgreSQL",
  "query": "\n            WITH team_matches AS (\n                SELECT team_name, COUNT(DISTINCT match_id) as matches \n                FROM (\n                    SELECT DISTINCT match_id, \n                        CASE \n                            WHEN home_team_name = 'Powers' THEN 'Milton Keynes Powers'\n                            WHEN home_team_name = 'Valiants' THEN 'Greenleys Valiants'\n                            WHEN home_team_name = 'Wooden Tops' THEN 'Little Horwood Wooden Tops'\n                            ELSE home_team_name \n                        END as team_name \n                    FROM table_tennis_games \n                    WHERE division = $1 AND season = $2\n                    UNION \n                    SELECT DISTINCT match_id,\n                        CASE \n                            WHEN away_team_name = 'Powers' THEN 'Milton Keynes Powers'\n                            WHEN away_team_name = 'Valiants' THEN 'Greenleys Valiants'\n                            WHEN away_team_name = 'Wooden Tops' THEN 'Little Horwood Wooden Tops'\n                            ELSE away_team_name \n                        END as team_name \n                    FROM table_tennis_games \n                    WHERE division = $1 AND season = $2\n                ) t\n                GROUP BY team_name\n            ),\n            player_legs AS (\n                SELECT \n                    home_player1 as player_name,\n                    CASE \n                        WHEN home_team_name = 'Powers' THEN 'Milton Keynes Powers'\n                        WHEN home_team_name = 'Valiants' THEN 'Greenleys Valiants'\n                        WHEN home_team_name = 'Wooden Tops' THEN 'Little Horwood Wooden Tops'\n                        ELSE home_team_name \n                    END as team_name,\n                    match_id,\n                    set_number,\n                    1 as legs_played,\n                    CASE WHEN home_score > away_score THEN 1 ELSE 0 END as leg_won\n                FROM table_tennis_games \n                WHERE division = $1 AND season = $2 AND home_player1 != ''\n                UNION ALL\n                SELECT \n                    away_player1 as player_name,\n                    CASE \n                        WHEN away_team_name = 'Powers' THEN 'Milton Keynes Powers'\n                        WHEN away_team_name = 'Valiants' THEN 'Greenleys Valiants'\n                        WHEN away_team_name = 'Wooden Tops' THEN 'Little Horwood Wooden Tops'\n                        ELSE away_team_name \n                    END as team_name,\n                    match_id,\n                    set_number,\n                    1 as legs_played,\n                    CASE WHEN away_score > home_score THEN 1 ELSE 0 END as leg_won\n                FROM table_tennis_games \n                WHERE division = $1 AND season = $2 AND away_player1 != ''\n            ),\n            games AS (\n                SELECT \n                    player_name,\n                    team_name,\n                    match_id,\n                    set_number,\n                    COUNT(*) as legs_in_game,\n                    SUM(leg_won) as legs_won\n                FROM player_legs\n                GROUP BY player_name, team_name, match_id, set_number\n            ),\n            player_stats AS (\n                SELECT \n                    p.player_name as player_name,\n                    p.team_name as team_name,\n                    COUNT(DISTINCT p.match_id)::int as matches_played,\n                    t.matches::int as matches_available,\n                    COUNT(DISTINCT p.match_id || '_' || p.set_number)::int as total_sets,\n                    SUM(CASE WHEN p.legs_won > p.legs_in_game/2 THEN 1 ELSE 0 END)::int as sets_won,\n                    SUM(CASE WHEN p.legs_won <= p.legs_in_game/2 THEN 1 ELSE 0 END)::int as sets_lost,\n                    ROUND(\n                        COALESCE(\n                            100.0 * SUM(CASE WHEN p.legs_won > p.legs_in_game/2 THEN 1 ELSE 0 END)::float / \n                            NULLIF(COUNT(DISTINCT p.match_id || '_' || p.set_number), 0),\n                            0.0\n                        ),\n                        2\n                    ) as win_percentage\n                FROM games p\n                JOIN team_matches t ON p.team_name = t.team_name\n                GROUP BY p.player_name, p.team_name, t.matches\n            )\n            SELECT \n                player_name as \"player_name?\",\n                team_name as \"team_name?\",\n                matches_played as \"matches_played?\",\n                matches_available as \"matches_available?\",\n                total_sets as \"total_sets?\",\n                sets_won as \"sets_won?\",\n                sets_lost as \"sets_lost?\",\n                win_percentage as \"win_percentage?\"\n            FROM player_stats\n            ORDER BY win_percentage DESC, total_sets DESC\n            ",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "player_name?",
        "type_info": "Varchar"
      },
      {
        "ordinal": 1,
        "name": "team_name?",
        "type_info": "Varchar"
      },
      {
        "ordinal": 2,
        "name": "matches_played?",
        "type_info": "Int4"
      },
      {
        "ordinal": 3,
        "name": "matches_available?",
        "type_info": "Int4"
      },
      {
        "ordinal": 4,
        "name": "total_sets?",
        "type_info": "Int4"
      },
      {
        "ordinal": 5,
        "name": "sets_won?",
        "type_info": "Int4"
      },
      {
        "ordinal": 6,
        "name": "sets_lost?",
        "type_info": "Int4"
      },
      {
        "ordinal": 7,
        "name": "win_percentage?",
        "type_info": "Float8"
      }
    ],
    "parameters": {
      "Left": [
        "Varchar",
        "Varchar"
      ]
    },
    "nullable": [
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true
    ]
  },
  "hash": "11880a854ffb52991a44c700d936341d06f4943c00a328e67731f68e874e23f3"
}
